options{
    STATIC = false;
    LOOKAHEAD = 2;
}

PARSER_BEGIN(Analizador)
public class Analizador{
    
    public static void main(String[] args){
        Analizador analizador = new Analizador(System.in);

        try{
            System.out.println("Iniciando análisis...\n");
            analizador.inicializarArbol();

            System.out.println("Análisis finalizado");
        }catch(ParseException e){
            System.out.println("Error de sintaxis: " + e.getMessage());
        }
    }

    class Nodo {
        Token token;
        Nodo izquierdo, derecho, padre;

        public Nodo(Token token){
            this.token = token;
            this.izquierdo = null;
            this.derecho = null;
            this.padre = null;
        }
    }

    class Arbol{
        Nodo raiz;

        public Arbol(){
            raiz = null;
        }

        public Arbol(Nodo raiz){
            this.raiz = raiz;
        }

        void enOrden(){
            System.out.println("\nRecorrido in-orden: ");
            enOrdenRec(raiz);
            System.out.println("\n");
        }

        void enOrdenRec(Nodo raiz){
            if (raiz != null) {
                //System.out.print(raiz.token.image + " ");
                enOrdenRec(raiz.izquierdo);                
                //System.out.println("cambio");
                System.out.print(raiz.token.image + " ");
                /*if(raiz.padre!=null){
                    System.out.println("Padre: "+raiz.padre.token.image + " ");
                }else{
                    System.out.println("Padre null");
                }
                
                System.out.println("Raiz: "+raiz.token.image + " ");*/
                enOrdenRec(raiz.derecho);
            }
        }

        public void insertar(Arbol arbolIzq, Arbol arbolDer, Nodo operador){
            operador.izquierdo = arbolIzq.raiz;
            operador.derecho = arbolDer.raiz;
            operador.izquierdo.padre = operador;
            operador.derecho.padre = operador;
            this.raiz = operador;
        }

        public Nodo getRaiz(){
            return raiz;
        }

        public void setRaiz(Nodo raiz){
            this.raiz = raiz;
        }
    }

    class ConversionFNC{
        Arbol arbol;
        boolean detectaCambios;

        public ConversionFNC(Arbol arbol){
            this.arbol = arbol;
        }

        Nodo obtenerSubArbol(Nodo raiz){
            if (raiz == null) {
                return null;
            }

            Nodo nuevoNodo = new Nodo(new Token(raiz.token.kind,raiz.token.image));
            //nuevoNodo.padre = raiz.padre;
            //System.out.println("nvo nodo: "+nuevoNodo.token.image);
            nuevoNodo.izquierdo = obtenerSubArbol(raiz.izquierdo);
            if(nuevoNodo.izquierdo != null){
                nuevoNodo.izquierdo.padre = nuevoNodo;
            }
            
            nuevoNodo.derecho = obtenerSubArbol(raiz.derecho);
            if(nuevoNodo.derecho != null){
                nuevoNodo.derecho.padre = nuevoNodo;
            }

            return nuevoNodo;
        }

        void generarFNC(){
            detectaCambios = false;

            System.out.println("Generar FNC");
            do{
                System.out.println("ITERACION");
                detectaCambios = false;
                aplicarConversion(this.arbol.raiz);
            }while(detectaCambios);
    
            System.out.println();
        }

        void aplicarConversion(Nodo raiz){
            if (raiz != null) {
                if(!detectaCambios){
                    aplicarConversion(raiz.izquierdo);
                    if(!detectaCambios){
                        aplicarSustituciones(raiz);
                    }
                    aplicarConversion(raiz.derecho);
                }
            }
        }

        void aplicarSustituciones(Nodo raiz){

            if(raiz.token.kind == BICONDICIONAL){
                sustituyeBicondicional(raiz);
                detectaCambios = true;
            }else if(raiz.token.kind == CONDICIONAL){
                sustituyeCondicional(raiz);
                detectaCambios = true;
            }else if(raiz.token.kind == NEGACION){
                if(raiz.derecho.token.kind == NEGACION){
                    eliminarDobleNegacion(raiz);
                    detectaCambios = true;
                }else{
                    detectaCambios = false;
                }
            }else{
                //detectaCambios = false;
            }

            if(raiz.token.kind == NEGACION){
                if(raiz.derecho.token.kind == CONJUNCION || raiz.derecho.token.kind == DISYUNCION){
                    leyDeMorgan(raiz);
                    detectaCambios = true;
                }
            }


            leyDistributiva(raiz);
            leyConmutativa(raiz);
        }

        void sustituyeBicondicional(Nodo raiz){
            Nodo nodoIzqA = obtenerSubArbol(raiz.izquierdo); 
            nodoIzqA.padre = raiz.izquierdo;
            Nodo nodoDerA = obtenerSubArbol(raiz.derecho); 
            nodoDerA.padre = raiz.izquierdo;

            Nodo nodoIzqB = obtenerSubArbol(raiz.izquierdo); 
            nodoIzqB.padre = raiz.derecho;
            Nodo nodoDerB = obtenerSubArbol(raiz.derecho);  
            nodoDerB.padre = raiz.derecho;

            raiz.token = new Token(CONJUNCION, "&");
            raiz.izquierdo.token = new Token(CONDICIONAL, ">");
            raiz.izquierdo.izquierdo = nodoIzqA; 
            raiz.izquierdo.derecho = nodoDerA;

            raiz.derecho.token = new Token(CONDICIONAL, ">");
            raiz.derecho.izquierdo = nodoDerB;
            raiz.derecho.derecho = nodoIzqB;
        }

        void sustituyeCondicional(Nodo raiz){
            Nodo nodoIzq = obtenerSubArbol(raiz.izquierdo);
            nodoIzq.padre = raiz.izquierdo;

            Nodo nodoDer = obtenerSubArbol(raiz.derecho); 
            nodoDer.padre = raiz;

            raiz.token = new Token(DISYUNCION, "|");

            raiz.izquierdo.token = new Token(NEGACION, "¬");
            raiz.izquierdo.derecho = nodoIzq;
            raiz.izquierdo.izquierdo = null;

            raiz.derecho = nodoDer;
        }

        void eliminarDobleNegacion(Nodo raiz){
            if(raiz.padre != null){ 
                if(raiz.padre.izquierdo == raiz){
                    raiz.padre.izquierdo = raiz.derecho.derecho;
                    raiz.derecho.derecho.padre = raiz.padre;
                }else if(raiz.padre.derecho == raiz){
                    raiz.padre.derecho = raiz.derecho.derecho;
                    raiz.derecho.derecho.padre = raiz.padre;
                }
            }else{//En el caso que haya una negación en la raiz del arbol
                this.arbol.raiz = raiz.derecho.derecho;
                this.arbol.raiz.padre = null;                
            }
        }

        void leyDeMorgan(Nodo raiz){
            if(raiz.derecho.token.kind == CONJUNCION){
                Nodo nodoIzq = obtenerSubArbol(raiz.derecho.izquierdo);
                Nodo nodoDer = obtenerSubArbol(raiz.derecho.derecho); 

                raiz.token = new Token(DISYUNCION, "|");

                raiz.derecho = new Nodo(new Token(NEGACION,"¬"));
                raiz.derecho.derecho = nodoDer;
                raiz.derecho.padre = raiz;
                nodoDer.padre = raiz.derecho;

                raiz.izquierdo = new Nodo(new Token(NEGACION,"¬"));
                raiz.izquierdo.derecho = nodoIzq;
                raiz.izquierdo.padre = raiz;
                nodoIzq.padre = raiz.izquierdo;

            }else if(raiz.derecho.token.kind == DISYUNCION){
                Nodo nodoIzq = obtenerSubArbol(raiz.derecho.izquierdo);
                Nodo nodoDer = obtenerSubArbol(raiz.derecho.derecho); 

                raiz.token = new Token(CONJUNCION, "&");

                raiz.derecho = new Nodo(new Token(NEGACION,"¬"));
                raiz.derecho.derecho = nodoDer;
                raiz.derecho.padre = raiz;
                nodoDer.padre = raiz.derecho;

                raiz.izquierdo = new Nodo(new Token(NEGACION,"¬"));
                raiz.izquierdo.derecho = nodoIzq;
                raiz.izquierdo.padre = raiz;
                nodoIzq.padre = raiz.izquierdo;
            }
        }

        void leyDistributiva(Nodo raiz){
            if(raiz.token.kind == DISYUNCION){//Por la derecha
                if(raiz.derecho.token.kind == CONJUNCION && (raiz.izquierdo.token.kind == VARIABLE || raiz.izquierdo.token.kind == NEGACION)){
                    //Evaluación por la derecha (variable sola a la izquierda)
                    Nodo nodoIzqA = obtenerSubArbol(raiz.izquierdo);
                    Nodo nodoIzqB = obtenerSubArbol(raiz.izquierdo);

                    Nodo nodoDerDer = obtenerSubArbol(raiz.derecho.derecho);
                    Nodo nodoDerIzq = obtenerSubArbol(raiz.derecho.izquierdo);

                    raiz.token = new Token(CONJUNCION, "&");

                    raiz.derecho = new Nodo(new Token(DISYUNCION,"|"));
                    raiz.derecho.padre = raiz;
                    raiz.derecho.derecho = nodoDerDer;
                    nodoDerDer.padre = raiz.derecho;

                    raiz.derecho.izquierdo = nodoIzqB;
                    nodoIzqB.padre = raiz.derecho;


                    raiz.izquierdo = new Nodo(new Token(DISYUNCION,"|"));
                    raiz.izquierdo.padre = raiz;
                    raiz.izquierdo.derecho = nodoDerIzq;
                    nodoDerIzq.padre = raiz.izquierdo;

                    raiz.izquierdo.izquierdo = nodoIzqA;
                    nodoIzqA.padre = raiz.izquierdo;
                    detectaCambios = true;
                }else if(raiz.izquierdo.token.kind == CONJUNCION && (raiz.derecho.token.kind == VARIABLE || raiz.derecho.token.kind == NEGACION)){
                    //Evaluación por la izquierda (variable sola a la derecha)
                    Nodo nodoDerA = obtenerSubArbol(raiz.derecho);
                    Nodo nodoDerB = obtenerSubArbol(raiz.derecho);

                    Nodo nodoIzqDer = obtenerSubArbol(raiz.izquierdo.derecho);
                    Nodo nodoIzqIzq = obtenerSubArbol(raiz.izquierdo.izquierdo);

                    raiz.token = new Token(CONJUNCION, "&");

                    raiz.derecho = new Nodo(new Token(DISYUNCION,"|"));
                    raiz.derecho.padre = raiz;
                    raiz.derecho.derecho = nodoDerB;
                    nodoDerB.padre = raiz.derecho;

                    raiz.derecho.izquierdo = nodoIzqDer;
                    nodoIzqDer.padre = raiz.derecho;


                    raiz.izquierdo = new Nodo(new Token(DISYUNCION,"|"));
                    raiz.izquierdo.padre = raiz;
                    raiz.izquierdo.derecho = nodoDerA;
                    nodoDerA.padre = raiz.izquierdo;

                    raiz.izquierdo.izquierdo = nodoIzqIzq;
                    nodoIzqIzq.padre = raiz.izquierdo;
                    detectaCambios = true;
                }   

            }else if(raiz.token.kind == CONJUNCION){//Por la derecha
                if(raiz.derecho.token.kind == DISYUNCION && (raiz.izquierdo.token.kind == VARIABLE || raiz.izquierdo.token.kind == NEGACION)){
                    //Evaluación por la derecha (variable sola a la izquierda)
                    Nodo nodoIzqA = obtenerSubArbol(raiz.izquierdo);
                    Nodo nodoIzqB = obtenerSubArbol(raiz.izquierdo);

                    Nodo nodoDerDer = obtenerSubArbol(raiz.derecho.derecho);
                    Nodo nodoDerIzq = obtenerSubArbol(raiz.derecho.izquierdo);

                    raiz.token = new Token(DISYUNCION, "|");

                    raiz.derecho = new Nodo(new Token(CONJUNCION,"&"));
                    raiz.derecho.padre = raiz;
                    raiz.derecho.derecho = nodoDerDer;
                    nodoDerDer.padre = raiz.derecho;

                    raiz.derecho.izquierdo = nodoIzqB;
                    nodoIzqB.padre = raiz.derecho;


                    raiz.izquierdo = new Nodo(new Token(CONJUNCION,"&"));
                    raiz.izquierdo.padre = raiz;
                    raiz.izquierdo.derecho = nodoDerIzq;
                    nodoDerIzq.padre = raiz.izquierdo;

                    raiz.izquierdo.izquierdo = nodoIzqA;
                    nodoIzqA.padre = raiz.izquierdo;
                    detectaCambios = true;
                }else if(raiz.izquierdo.token.kind == DISYUNCION && (raiz.derecho.token.kind == VARIABLE || raiz.derecho.token.kind == NEGACION)){
                    //Evaluación por la izquierda (variable sola a la derecha)
                    Nodo nodoDerA = obtenerSubArbol(raiz.derecho);
                    Nodo nodoDerB = obtenerSubArbol(raiz.derecho);

                    Nodo nodoIzqDer = obtenerSubArbol(raiz.izquierdo.derecho);
                    Nodo nodoIzqIzq = obtenerSubArbol(raiz.izquierdo.izquierdo);

                    raiz.token = new Token(DISYUNCION, "|");

                    raiz.derecho = new Nodo(new Token(CONJUNCION,"&"));
                    raiz.derecho.padre = raiz;
                    raiz.derecho.derecho = nodoDerB;
                    nodoDerB.padre = raiz.derecho;

                    raiz.derecho.izquierdo = nodoIzqDer;
                    nodoIzqDer.padre = raiz.derecho;


                    raiz.izquierdo = new Nodo(new Token(CONJUNCION,"&"));
                    raiz.izquierdo.padre = raiz;
                    raiz.izquierdo.derecho = nodoDerA;
                    nodoDerA.padre = raiz.izquierdo;

                    raiz.izquierdo.izquierdo = nodoIzqIzq;
                    nodoIzqIzq.padre = raiz.izquierdo;
                    detectaCambios = true;
                }   
            }
        }
        

        void leyConmutativa(Nodo raiz){
            boolean detectaConmutacion = false;

            if(raiz.token.kind == DISYUNCION){
                //Verifica que la otra disyunción esté a la izquierda
                if(raiz.izquierdo.token.kind == DISYUNCION){
                    
                    if(raiz.derecho.token.kind == VARIABLE){ //Verifica de lado derecho haya una variable (sola)
                        //Se trata el nodo izquierdo.izquierdo
                        if(raiz.izquierdo.izquierdo.token.kind == VARIABLE && !detectaConmutacion){//Verifica que el nodo IZQUIERDO de la disyunción hija sea una variable

                            if(raiz.derecho.token.image.equals(raiz.izquierdo.izquierdo.token.image)){//Verifica que sean la misma variable
                                Nodo nodoDer = obtenerSubArbol(raiz.derecho);

                                raiz.izquierdo.derecho.padre = raiz;
                                raiz.derecho = raiz.izquierdo.derecho;

                                raiz.izquierdo.derecho = nodoDer;
                                nodoDer.padre = raiz.izquierdo;
                                detectaConmutacion = true;
                            }
                            
                        }else if(raiz.izquierdo.izquierdo.token.kind == NEGACION && !detectaConmutacion){//Verifica que el nodo IZQUIERDO de la disyunción hija sea una negación
                            
                            if(raiz.derecho.token.image.equals(raiz.izquierdo.izquierdo.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoDer = obtenerSubArbol(raiz.derecho);

                                raiz.izquierdo.derecho.padre = raiz;
                                raiz.derecho = raiz.izquierdo.derecho;

                                raiz.izquierdo.derecho = nodoDer;
                                nodoDer.padre = raiz.izquierdo;
                                detectaConmutacion = true;
                            }
                        }

                        //Se trata el nodo izquierdo.derecho
                        if(raiz.izquierdo.derecho.token.kind == VARIABLE && !detectaConmutacion){//Verifica que el nodo DERECHO de la disyunción hija sea una variable
                            
                            if(raiz.derecho.token.image.equals(raiz.izquierdo.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoDer = obtenerSubArbol(raiz.derecho);

                                raiz.izquierdo.izquierdo.padre = raiz;
                                raiz.derecho = raiz.izquierdo.izquierdo;

                                raiz.izquierdo.izquierdo = nodoDer;
                                nodoDer.padre = raiz.izquierdo;
                                detectaConmutacion = true;
                            }
                            
                        }else if(raiz.izquierdo.derecho.token.kind == NEGACION && !detectaConmutacion){//Verifica que el nodo DERECHO de la disyunción hija sea una negación
                            
                            if(raiz.derecho.token.image.equals(raiz.izquierdo.derecho.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoDer = obtenerSubArbol(raiz.derecho);

                                raiz.izquierdo.izquierdo.padre = raiz;
                                raiz.derecho = raiz.izquierdo.izquierdo;

                                raiz.izquierdo.izquierdo = nodoDer;
                                nodoDer.padre = raiz.izquierdo;
                                detectaConmutacion = true;
                            }
                        }
                    
                    }else if(raiz.derecho.token.kind == NEGACION){//Verifica que de lado derecho haya una negación (seguida de una variable)
                        //Se trata el nodo izquierdo.izquierdo
                        if(raiz.izquierdo.izquierdo.token.kind == VARIABLE && !detectaConmutacion){//Verifica que el nodo IZQUIERDO de la disyunción hija sea una variable

                            if(raiz.derecho.derecho.token.image.equals(raiz.izquierdo.izquierdo.token.image)){//Verifica que sean la misma variable
                                Nodo nodoDer = obtenerSubArbol(raiz.derecho);

                                raiz.izquierdo.derecho.padre = raiz;
                                raiz.derecho = raiz.izquierdo.derecho;

                                raiz.izquierdo.derecho = nodoDer;
                                nodoDer.padre = raiz.izquierdo;
                                detectaConmutacion = true;
                            }
                            
                        }else if(raiz.izquierdo.izquierdo.token.kind == NEGACION && !detectaConmutacion){//Verifica que el nodo IZQUIERDO de la disyunción hija sea una negación
                            
                            if(raiz.derecho.derecho.token.image.equals(raiz.izquierdo.izquierdo.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoDer = obtenerSubArbol(raiz.derecho);

                                raiz.izquierdo.derecho.padre = raiz;
                                raiz.derecho = raiz.izquierdo.derecho;

                                raiz.izquierdo.derecho = nodoDer;
                                nodoDer.padre = raiz.izquierdo;
                                detectaConmutacion = true;
                            }
                        
                        }

                        //Se trata el nodo izquierdo.derecho
                        if(raiz.izquierdo.derecho.token.kind == VARIABLE && !detectaConmutacion){//Verifica que el nodo DERECHO de la disyunción hija sea una variable
                            
                            if(raiz.derecho.derecho.token.image.equals(raiz.izquierdo.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoDer = obtenerSubArbol(raiz.derecho);

                                raiz.izquierdo.izquierdo.padre = raiz;
                                raiz.derecho = raiz.izquierdo.izquierdo;

                                raiz.izquierdo.izquierdo = nodoDer;
                                nodoDer.padre = raiz.izquierdo;
                                detectaConmutacion = true;
                            }
                            
                        }else if(raiz.izquierdo.derecho.token.kind == NEGACION && !detectaConmutacion){//Verifica que el nodo DERECHO de la disyunción hija sea una negación

                            if(raiz.derecho.derecho.token.image.equals(raiz.izquierdo.derecho.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoDer = obtenerSubArbol(raiz.derecho);

                                raiz.izquierdo.izquierdo.padre = raiz;
                                raiz.derecho = raiz.izquierdo.izquierdo;

                                raiz.izquierdo.izquierdo = nodoDer;
                                nodoDer.padre = raiz.izquierdo;
                                detectaConmutacion = true;
                            }
                        }
                    }
                }//Fin disyunción a la IZQUIERDA

                //Verifica que la otra disyunción esté a la DERECHA
                if(raiz.derecho.token.kind == DISYUNCION){
                    
                    if(raiz.izquierdo.token.kind == VARIABLE){ //Verifica de lado IZQUIERDO haya una variable (sola)

                        //Se trata que el Nodo raiz.izquierdo == raiz.derecho.izquierdo
                        if(raiz.derecho.izquierdo.token.kind == VARIABLE && !detectaConmutacion){//Verifica que el nodo IZQUIERDO de la disyunción hija sea una variable

                            if(raiz.izquierdo.token.image.equals(raiz.derecho.izquierdo.token.image)){//Verifica que sean la misma variable
                                Nodo nodoIzq = obtenerSubArbol(raiz.izquierdo);

                                raiz.derecho.derecho.padre = raiz;
                                raiz.izquierdo = raiz.derecho.derecho;

                                raiz.derecho.derecho = nodoIzq;
                                nodoIzq.padre = raiz.derecho;
                                detectaConmutacion = true;
                            }
                            
                        }else if(raiz.derecho.izquierdo.token.kind == NEGACION && !detectaConmutacion){//Verifica que el nodo IZQUIERDO de la disyunción hija sea una negación
                            
                            if(raiz.izquierdo.token.image.equals(raiz.derecho.izquierdo.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoIzq = obtenerSubArbol(raiz.izquierdo);

                                raiz.derecho.derecho.padre = raiz;
                                raiz.izquierdo = raiz.derecho.derecho;

                                raiz.derecho.derecho = nodoIzq;
                                nodoIzq.padre = raiz.derecho;
                                detectaConmutacion = true;
                            }
                        }

                        //Se trata que el Nodo raiz.izquierdo == raiz.derecho.derecho
                        if(raiz.derecho.derecho.token.kind == VARIABLE && !detectaConmutacion){//Verifica que el nodo DERECHO de la disyunción hija sea una variable

                            if(raiz.izquierdo.token.image.equals(raiz.derecho.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoIzq = obtenerSubArbol(raiz.izquierdo);

                                raiz.derecho.izquierdo.padre = raiz;
                                raiz.izquierdo = raiz.derecho.izquierdo;

                                raiz.derecho.izquierdo = nodoIzq;
                                nodoIzq.padre = raiz.derecho;
                                detectaConmutacion = true;
                            }
                        }else if(raiz.derecho.derecho.token.kind == NEGACION && !detectaConmutacion){//Verifica que el nodo DERECHO de la disyunción hija sea una negación
                            
                            if(raiz.izquierdo.token.image.equals(raiz.derecho.derecho.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoIzq = obtenerSubArbol(raiz.izquierdo);

                                raiz.derecho.izquierdo.padre = raiz;
                                raiz.izquierdo = raiz.derecho.izquierdo;

                                raiz.derecho.izquierdo = nodoIzq;
                                nodoIzq.padre = raiz.derecho;
                                detectaConmutacion = true;
                            }
                        }

                    
                    }else if(raiz.izquierdo.token.kind == NEGACION){//Verifica que de lado IZQUIERDO haya una negación (seguida de una variable)

                        //Se trata que el Nodo raiz.izquierdo == raiz.derecho.izquierdo
                        if(raiz.derecho.izquierdo.token.kind == VARIABLE && !detectaConmutacion){//Verifica que el nodo IZQUIERDO de la disyunción hija sea una variable

                            if(raiz.izquierdo.derecho.token.image.equals(raiz.derecho.izquierdo.token.image)){//Verifica que sean la misma variable
                                Nodo nodoIzq = obtenerSubArbol(raiz.izquierdo);

                                raiz.derecho.derecho.padre = raiz;
                                raiz.izquierdo = raiz.derecho.derecho;

                                raiz.derecho.derecho = nodoIzq;
                                nodoIzq.padre = raiz.derecho;
                                detectaConmutacion = true;
                            }
                            
                        }else if(raiz.derecho.izquierdo.token.kind == NEGACION && !detectaConmutacion){//Verifica que el nodo IZQUIERDO de la disyunción hija sea una negación
                            
                            if(raiz.izquierdo.derecho.token.image.equals(raiz.derecho.izquierdo.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoIzq = obtenerSubArbol(raiz.izquierdo);

                                raiz.derecho.derecho.padre = raiz;
                                raiz.izquierdo = raiz.derecho.derecho;

                                raiz.derecho.derecho = nodoIzq;
                                nodoIzq.padre = raiz.derecho;
                                detectaConmutacion = true;
                            }
                        }

                        //Se trata que el Nodo raiz.izquierdo == raiz.derecho.derecho
                        if(raiz.derecho.derecho.token.kind == VARIABLE && !detectaConmutacion){//Verifica que el nodo DERECHO de la disyunción hija sea una variable

                            if(raiz.izquierdo.derecho.token.image.equals(raiz.derecho.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoIzq = obtenerSubArbol(raiz.izquierdo);

                                raiz.derecho.izquierdo.padre = raiz;
                                raiz.izquierdo = raiz.derecho.izquierdo;

                                raiz.derecho.izquierdo = nodoIzq;
                                nodoIzq.padre = raiz.derecho;
                                detectaConmutacion = true;
                            }
                        }else if(raiz.derecho.derecho.token.kind == NEGACION && !detectaConmutacion){//Verifica que el nodo DERECHO de la disyunción hija sea una negación

                            if(raiz.izquierdo.derecho.token.image.equals(raiz.derecho.derecho.derecho.token.image)){//Verifica que sean la misma variable
                                Nodo nodoIzq = obtenerSubArbol(raiz.izquierdo);

                                raiz.derecho.izquierdo.padre = raiz;
                                raiz.izquierdo = raiz.derecho.izquierdo;

                                raiz.derecho.izquierdo = nodoIzq;
                                nodoIzq.padre = raiz.derecho;
                                detectaConmutacion = true;
                            }
                        }
                    }
                }//Fin disyunción a la derecha

            }
        }
    }
}

PARSER_END(Analizador)

TOKEN:{
    <BICONDICIONAL: "=">{System.out.println("BICONDICIONAL: " + image);}
    | <CONDICIONAL: ">">{System.out.println("CONDICIONAL: " + image);}
    | <DISYUNCION: "|">{System.out.println("DISYUNCION: " + image);}
    | <CONJUNCION: "&">{System.out.println("CONJUNCION: " + image);}
    | <NEGACION: "¬">{System.out.println("NEGACION: " + image);}
    | <VARIABLE: (["A"-"Z"])+>{System.out.println("VARIABLE: " + image);}
}

TOKEN:{
    <PARENTESIS_IZQ: "(">{System.out.println("PARENTESIS_IZQ: " + image);}
    | <PARENTESIS_DER: ")">{System.out.println("PARENTESIS_DER: " + image);}
    | <CORCHETE_IZQ: "[">{System.out.println("CORCHETE_IZQ: " + image);}
    | <CORCHETE_DER: "]">{System.out.println("CORCHETE_DER: " + image);}
    | <LLAVE_IZQ: "{">{System.out.println("LLAVE_IZQ: " + image);}
    | <LLAVE_DER: "}">{System.out.println("LLAVE_DER: " + image);}
}

SKIP:{
    " " | "\t" | "\n" | "\r" | "\r\n"
}

TOKEN:{
    <FORMULAVALIDA: "1">
    | <CONTRADICCION: "0">
}

void inicializarArbol():{
    Arbol arbol;
    ConversionFNC conversion;
}{
    arbol = condicionales(){System.out.println("Fin"); arbol.enOrden(); conversion = new ConversionFNC(arbol); conversion.generarFNC(); arbol.enOrden();}
}

Arbol condicionales():{
    Arbol arbolIzq, arbolDer;
    Token t;
}{
    arbolIzq = operacionesLogicas()( 
         <CONDICIONAL>   {t = token;} arbolDer = operacionesLogicas() { arbolIzq.insertar(arbolIzq, arbolDer, new Nodo(t)); }
        |<BICONDICIONAL> {t = token;} arbolDer = operacionesLogicas() { arbolIzq.insertar(arbolIzq, arbolDer, new Nodo(t)); })*
        {return arbolIzq;}
}

Arbol operacionesLogicas():{
    Arbol arbolIzq, arbolDer;
    Token t;
}{
    arbolIzq = procesarNegacion()(
         <CONJUNCION> {t = token;} arbolDer = procesarNegacion() { arbolIzq.insertar(arbolIzq, arbolDer, new Nodo(t)); }
        |<DISYUNCION> {t = token;} arbolDer = procesarNegacion() { arbolIzq.insertar(arbolIzq, arbolDer, new Nodo(t)); })*
        {return arbolIzq;}
}

Arbol procesarNegacion():{
    Arbol arbolIzq = new Arbol(); //ArbolIzq tiene todas las negaciones
    Arbol arbolDer;
}{
    ((<NEGACION>{
        if(arbolIzq.raiz == null){//Crea el nodo de negacion y busca cual es el ultimo hacia la derecha
            arbolIzq.setRaiz(new Nodo(token));
        }else{
            Nodo actual = arbolIzq.raiz;
            while(actual.derecho != null){
                actual = actual.derecho;
            }
            actual.derecho = new Nodo(token);
            actual.derecho.padre = actual; //SE DICE QUIEN ES EL NODO PADRE
        }
    } arbolDer = procesarNegacion()) //arbolDer puede ser una VARIABLE o una NEGACION, ambas retornan un arbol
    | arbolDer = procesarVariable()//ProcesarVariable retorna un arbol con un nodo variable como raiz
    ){
        if(arbolIzq.raiz == null){
            arbolIzq.setRaiz(arbolDer.raiz);
        }
        else{
            Nodo actual = arbolIzq.raiz; //Se obtiene el nodo del arbol
            while(actual.derecho != null){
                actual = actual.derecho; //Se recorre hasta el ultimo nodo a la derecha en caso de haya habido negaciones
            }
            
            actual.derecho = arbolDer.raiz;
            arbolDer.raiz.padre = actual;//SE DICE QUIEN ES EL NODO PADRE
        }
        return arbolIzq;
    }
}

Arbol procesarVariable():{
    Arbol arbol;
}{
    (<VARIABLE>{ arbol = new Arbol(new Nodo(token)); } | arbol = procesarAgrupaciones()){ return arbol; }
}

Arbol procesarAgrupaciones():{
    Arbol arbol;
}{
      <PARENTESIS_IZQ> arbol = condicionales() <PARENTESIS_DER>{ return arbol; }
    | <CORCHETE_IZQ>   arbol = condicionales() <CORCHETE_DER>{ return arbol; }
    | <LLAVE_IZQ>      arbol = condicionales() <LLAVE_DER>{ return arbol; }
}